{"version":3,"sources":["components/User.jsx","components/TodoItem.jsx","components/TodoList.jsx","App.jsx","serviceWorker.js","index.js"],"names":["User","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","user","name","email","Component","TodoItem","User_User","item","title","className","completed","TodoList","_this","state","items","getItem","bind","assertThisInitialized","sortList","url","fetch","then","response","json","data","setState","prevState","sort","b","localeCompare","_this2","Promise","all","loadData","_ref","_ref2","slicedToArray","todos","users","map","todoItem","objectSpread","find","id","userId","onClick","TodoItem_TodoItem","key","App","TodoList_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.81b463d1.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nexport default class User extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n  render() {\r\n    return (\r\n      <td>\r\n        <span><strong>{this.props.user.name}</strong></span>\r\n        <span>{this.props.user.email}</span>\r\n      </td>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport User from './User.jsx'\r\n\r\nexport default class TodoItem extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  render() {\r\n    return (\r\n      <tr>\r\n        <User user={this.props.item.user} />\r\n        <td>{this.props.item.title}</td>\r\n        <td className={this.props.item.completed ? 'td-completed' : 'td-inprogress'}>\r\n          {this.props.item.completed ? 'completed' : 'in progress'}\r\n        </td>\r\n      </tr>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport TodoItem from './TodoItem.jsx';\r\n\r\n\r\nexport default class TodoList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n\r\n      items: []\r\n    }\r\n    this.getItem = this.getItem.bind(this)\r\n    this.sortList = this.sortList.bind(this)\r\n  }\r\n  \r\n  loadData(url) {\r\n    return fetch(url)\r\n      .then(response => response.json())\r\n      .then(data => data);\r\n  }\r\n\r\n  sortList() {\r\n    this.setState((prevState) => ({\r\n      items: prevState.items.sort((a, b) => (a.title).localeCompare(b.title))\r\n    }))\r\n  }\r\n\r\n  getItem() {\r\n    Promise.all([this.loadData('https://jsonplaceholder.typicode.com/todos'),\r\n    this.loadData('https://jsonplaceholder.typicode.com/users')])\r\n      .then(([todos, users]) => this.setState({\r\n        items: todos.map(todoItem => ({\r\n          ...todoItem,\r\n          user: users.find(user => user.id === todoItem.userId),\r\n        }))\r\n      }))\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button onClick={this.getItem}>Load data</button>\r\n        <button onClick={this.sortList}>Sort title</button>\r\n        <tbody>\r\n          {this.state.items.map(item => <TodoItem key={item.id} item={item} />)}\r\n        </tbody>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList.jsx';\n\nfunction App() {\n  return (\n    <table className=\"App\">\n      <TodoList />\n    </table>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}